using HighlightLib;
using HighlightPlayer.Converter;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Threading;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using System.Windows.Media;

namespace HighlightPlayer.Controls
{
    class MediaFilesDataGrid : DataGrid
    {
        private const string columnNameFullPath = "Name", columnNameDuration = "Duration", columnNameCount = "Count";

        private static readonly Brush rowSelectedBrush = Brushes.LightBlue, rowUnselectedBrush = Brushes.Transparent;

        public static readonly DependencyProperty MediaFilesSourceProperty =
            DependencyProperty.Register("MediaFilesSource", typeof(IList<MediaFile>), typeof(MediaFilesDataGrid),
                new PropertyMetadata(null, new PropertyChangedCallback(OnMediaFilesSourcePropertyChanged)));

        private static void OnMediaFilesSourcePropertyChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)
        {
            var s = (MediaFilesDataGrid)sender;
            var value = (IList<MediaFile>)e.NewValue;

            s.ItemsSource = value;
        }

        public static readonly DependencyProperty PlayMediaFileProperty =
            DependencyProperty.Register("PlayMediaFile", typeof(MediaFile), typeof(MediaFilesDataGrid),
                new PropertyMetadata(null, new PropertyChangedCallback(OnPlayMediaFilePropertyChanged)));

        private static void OnPlayMediaFilePropertyChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)
        {
            var s = (MediaFilesDataGrid)sender;
            var oldValue = (MediaFile)e.OldValue;
            var newValue = (MediaFile)e.NewValue;

            s.SetMediaFileRowsBackgrounds();
        }

        public IList<MediaFile> MediaFilesSource
        {
            get { return (IList<MediaFile>)GetValue(MediaFilesSourceProperty); }
            set { SetValue(MediaFilesSourceProperty, value); }
        }

        public MediaFile PlayMediaFile
        {
            get { return (MediaFile)GetValue(PlayMediaFileProperty); }
            set { SetValue(PlayMediaFileProperty, value); }
        }

        private Dictionary<MediaFile, DataGridRow> rows;

        public MediaFilesDataGrid()
        {
            SelectionUnit = DataGridSelectionUnit.Cell;
            AutoGenerateColumns = true;
            RowHeaderWidth = 0;

            rows = new Dictionary<MediaFile, DataGridRow>();
        }

        protected override void OnItemsSourceChanged(IEnumerable oldValue, IEnumerable newValue)
        {
            base.OnItemsSourceChanged(oldValue, newValue);

            if (newValue is IList<MediaFile>) MediaFilesSource = newValue as IList<MediaFile>;
        }

        protected override void OnAutoGeneratingColumn(DataGridAutoGeneratingColumnEventArgs e)
        {
            DataGridBoundColumn column = e.Column as DataGridBoundColumn;
            Binding binding = column.Binding as Binding;

            switch (column.Header)
            {
                case "FullPath":
                    column.MinWidth = 50;
                    column.Header = columnNameFullPath;

                    binding.Converter = new MediaFileNameConverter();
                    break;

                case columnNameDuration:
                    column.MinWidth = 50;

                    binding.Converter = new TimeSpanConverter();
                    break;

                case "Highlights":
                    column.MinWidth = 50;
                    column.Header = columnNameCount;

                    binding.Converter = new HighlightsCountConverter();
                    binding.UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged;
                    break;

                default:
                    e.Cancel = true;
                    break;
            }

            base.OnAutoGeneratingColumn(e);
        }

        protected override void OnAutoGeneratedColumns(EventArgs e)
        {
            Columns.First(c => (string)c.Header == columnNameFullPath).DisplayIndex = 0;
            Columns.First(c => (string)c.Header == columnNameDuration).DisplayIndex = 1;
            Columns.First(c => (string)c.Header == columnNameCount).DisplayIndex = 2;

            base.OnAutoGeneratedColumns(e);
        }

        protected override void OnLoadingRow(DataGridRowEventArgs e)
        {
            MediaFile mediaFile = e.Row.DataContext as MediaFile;

            if (mediaFile == null) return;

            rows.Add(mediaFile, e.Row);
            e.Row.Background = PlayMediaFile == mediaFile ? rowSelectedBrush : rowUnselectedBrush;

            mediaFile.Highlights.CollectionChanged += OnHighlightCollectionChanged;
            e.Row.KeyDown += Row_KeyDown;

            base.OnLoadingRow(e);
        }

        protected override void OnUnloadingRow(DataGridRowEventArgs e)
        {
            MediaFile mediaFile = e.Row.DataContext as MediaFile;

            if (mediaFile == null) return;

            rows.Remove(mediaFile);

            mediaFile.Highlights.CollectionChanged -= OnHighlightCollectionChanged;
            e.Row.KeyDown += Row_KeyDown;

            base.OnUnloadingRow(e);
        }

        private void OnDurationLoaded(MediaFile sender, TimeSpan duration)
        {
            UpdateCell(sender, columnNameDuration);
            UpdateCell(sender, columnNameCount);
        }

        private void OnHighlightCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            DataGridColumn column = Columns.FirstOrDefault(c => c.Header.ToString() == columnNameCount);
            TextBlock cell = column?.GetCellContent(rows.Keys.FirstOrDefault(f => f.Highlights == sender)) as TextBlock;
            BindingExpression bindingExpression = cell?.GetBindingExpression(TextBlock.TextProperty);

            bindingExpression?.UpdateTarget();
        }

        private void UpdateCell(MediaFile mediaFile, string columnName)
        {
            if (Thread.CurrentThread == Dispatcher.Thread)
            {
                DataGridColumn column = Columns.FirstOrDefault(c => c.Header.ToString() == columnName);
                TextBlock cell = column?.GetCellContent(mediaFile) as TextBlock;
                BindingExpression bindingExpression = cell?.GetBindingExpression(TextBlock.TextProperty);

                bindingExpression?.UpdateTarget();
            }
            else
            {
                Dispatcher.Invoke(
                    () =>
                    {
                        DataGridColumn column = Columns.FirstOrDefault(c => c.Header.ToString() == columnName);
                        TextBlock cell = column?.GetCellContent(mediaFile) as TextBlock;
                        BindingExpression bindingExpression = cell?.GetBindingExpression(TextBlock.TextProperty);

                        bindingExpression?.UpdateTarget();
                    });
            }
        }

        private void Row_KeyDown(object sender, KeyEventArgs e)
        {
            MediaFile mediaFile = (sender as DataGridRow)?.DataContext as MediaFile;

            if (e.Key == Key.Enter) PlayMediaFile = mediaFile;
            else if (e.Key == Key.Delete) MediaFilesSource?.Remove(mediaFile);
        }

        private void SetMediaFileRowsBackgrounds()
        {
            foreach (KeyValuePair<MediaFile, DataGridRow> pair in rows)
            {
                bool isCurrentMediaFile = PlayMediaFile == pair.Key;
                pair.Value.Background = isCurrentMediaFile ? rowSelectedBrush : rowUnselectedBrush;
            }
        }
    }
}
